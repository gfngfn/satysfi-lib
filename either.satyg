@import: base

type 'a 'b either =
| Left of 'a
| Right of 'b

module Either : sig
  val left : 'a -> 'a 'b either
  val right : 'b -> 'a 'b either
  val is-left : 'a 'b either -> bool
  val is-right : 'a 'b either -> bool
  val unwrap-left : 'a 'b either -> 'a
  val unwrap-right : 'a 'b either -> 'b
  val either : ('a -> 'c) -> ('b -> 'c) -> 'a 'b either -> 'c
  val bimap : ('a -> 'c) -> ('b -> 'd) -> 'a 'b either -> 'c 'd either
  val swap : 'a 'b either -> 'b 'a either
  val value : 'a 'a either -> 'a
end = struct
  let left x = Left(x)
  let right x = Right(x)
  let is-left e = match e with
  | Left(_) -> true
  | Right(_) -> false
  let is-right e = match e with
  | Left(_) -> false
  | Right(_) -> true
  let unwrap-left e = match e with
  | Left(x) -> x
  | Right(_) -> error `unwrap-left failed`
  let unwrap-right e = match e with
  | Right(x) -> x
  | Left(_) -> error `unwrap-right failed`
  let either f g e = match e with
  | Left(x) -> f x
  | Right(x) -> g x
  let bimap f g e = match e with
  | Left(x) -> left (f x)
  | Right(x) -> right (g x)
  let swap e = match e with
  | Left(x) -> right x
  | Right(x) -> left x
  let value e = match e with
  | Left(x) -> x
  | Right(x) -> x
end