@import: zrbase/zp0

module Float : sig
  val inf : float
  val ninf : float
  val nan : float

  val is-zero : float -> bool
  val is-inf : float -> bool
  val is-nan : float -> bool

  val (<) : float -> float -> bool
  val (>) : float -> float -> bool
  val (>=) : float -> float -> bool
  val (<=) : float -> float -> bool
  val (==) : float -> float -> bool  % ieee754-compliant comparison

  val neg : float -> float
  val abs : float -> float
  val min : float -> float -> float
  val max : float -> float -> float
  val min-value : float % == neg-inf
  val max-value : float % == inf
  val pow : float -> float -> float

  val of-int : int -> float
  val to-int : float -> int

  val ceil : float -> float
  val floor : float -> float
  val round : float -> float
%  val truncate : float -> float

  val sin : float -> float
  val cos : float -> float
  val tan : float -> float
  val asin : float -> float
  val acos : float -> float
  val atan : float -> float
  val atan2 : float -> float -> float
  val sqrt : float -> float
  val exp : float -> float
  val log : float -> float
  val log10 : float -> float

  val pi : float
end = struct
  let neg f = (0.0 -. 1.0) *. f % `0.0 -. f` does not work properly when f == 0.0

  let nan = 0.0 /. 0.0
  let inf = 1.0 /. 0.0
  let ninf = neg inf

  let to-length f = 1pt *' f % never introduces inexactness

  let (<) f g = to-length f <' to-length g
  let (>) f g = g < f

  let abs f = if f < 0.0 then neg f else f

  let is-zero-or-nan f = not (f < neg f || f > neg f)
  let is-nan f = is-zero-or-nan f && is-zero-or-nan (f +. 1.0)
  let is-zero f = is-zero-or-nan f && not (is-nan f)
  let is-inf f = not (is-nan f) && is-nan (f -. f)
  let (==) f g =
    if is-nan f || is-nan g then
      false
    else if is-inf f || is-inf g then
      (is-inf f && is-inf g && f *. g > 0.0)
    else
      is-zero (f -. g)

  let (<=) f g = f < g || f == g
  let (>=) f g = g <= f

  let min f g = if is-nan f || is-nan g then nan else if f < g then f else g
  let max f g = if is-nan f || is-nan g then nan else if f > g then f else g

  let min-value = ninf
  let max-value = inf

  let of-int = float
  let to-int = round

  let pow y x = ZP0.pow x y % x^y == (x |> pow y)

  let ceil = ZP0.ceil
  let floor = ZP0.floor
  let round f = of-int (to-int f)
%  let truncate = ZP0.truncate

  let sin = sin
  let cos = cos
  let tan = tan
  let asin = asin
  let acos = acos
  let atan = atan
  let atan2 = atan2
  let sqrt = ZP0.sqrt
  let exp = ZP0.exp
  let log = ZP0.log
  let log10 = ZP0.log10

  let pi = 3.1415926536
end