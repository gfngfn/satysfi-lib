@import: zrbase/zp0

module Float : sig
  val infinity : float
  val neg-infinity : float
  val nan : float

  val sin : float -> float
  val cos : float -> float
  val tan : float -> float
  val asin : float -> float
  val acos : float -> float
  val atan : float -> float
  val atan2 : float -> float -> float
  val sqrt : float -> float
  val exp : float -> float
  val log : float -> float
  val log10 : float -> float
%   val is-inf : float -> bool
%   val is-nan : float -> bool

  val (+) : float -> float -> float
  val (-) : float -> float -> float
  val (*) : float -> float -> float
  val (/) : float -> float -> float
  val neg : float -> float
  val abs : float -> float
  val pow : float -> float -> float
  val min : float -> float -> float
  val max : float -> float -> float

  val of-int : int -> float
  val to-int : float -> int

  val equal : float -> float -> bool

  val ceil : float -> float
  val floor : float -> float
  val round : float -> float
%  val truncate : float -> float

  val max-value : float % == infinity
  val min-value : float % == neg-infinity
% val epsilon-float : float

end = struct
  let sin = sin
  let cos = cos
  let tan = tan
  let asin = asin
  let acos = acos
  let atan = atan
  let atan2 = atan2
  let sqrt = ZP0.sqrt
  let exp = ZP0.exp
  let log = ZP0.log
  let log10 = ZP0.log10

  let of-int = ZP0.float-of-int
  let to-int = ZP0.int-of-float

  let neg = ZP0.fneg
  let abs = ZP0.abs-float
  let pow x y = ZP0.pow y x  % x^y == (y |> pow x)
  let min = ZP0.fmin
  let max = ZP0.fmax

  let infinity = 1.0 /. 0.0
  let neg-infinity = 0.0 -. infinity
  let nan = 0.0 /. 0.0

  let max-value = infinity
  let min-value = neg-infinity

  let equal = ZP0.fequal

  let ceil = ZP0.ceil
  let floor = ZP0.floor
  let round f = float (round f)
%  let truncate = ZP0.truncate

  let (+) f g = f +. g
  let (-) f g = f -. g
  let (*) f g = f *. g
  let (/) f g = f /. g
end