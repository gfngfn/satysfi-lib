@import: base
@import: equal

% total order on 'a
type 'a ord = 'a -> 'a -> int

type ordering = Lt | Gt | Eq

module Ord : sig
  val to-equal : (('a ord) implicit -> 'a equal) implicit
  val compare : ('a ord) implicit -> 'a -> 'a -> ordering
  val min : ('a ord) implicit -> 'a -> 'a -> 'a
  val max : ('a ord) implicit -> 'a -> 'a -> 'a
  val eq : ('a ord) implicit -> 'a -> 'a -> bool
  val lt : ('a ord) implicit -> 'a -> 'a -> bool
  val le : ('a ord) implicit -> 'a -> 'a -> bool
  val gt : ('a ord) implicit -> 'a -> 'a -> bool
  val ge : ('a ord) implicit -> 'a -> 'a -> bool
end = struct
  let to-equal ord a b = ord a b == 0

  let compare ord a b =
    let o = ord a b in
    if o < 0 then
      Lt
    else if o > 0 then
      Gt
    else
      Eq

  let min ord a b =
    if ord a b <= 0 then
      a
    else
      b

  let max ord a b =
    if ord a b >= 0 then
      a
    else
      b

  let eq ord a b = ord a b == 0
  let lt ord a b = ord a b < 0
  let le ord a b = ord a b <= 0
  let gt ord a b = ord a b > 0
  let ge ord a b = ord a b >= 0
end