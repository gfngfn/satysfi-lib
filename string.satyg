@require: list
@import: base
@import: char
@import: zrbase/zl0

module String : sig
  val equal : (string equal) implicit
  val length : string -> int
  val sub : int -> int -> string -> string
  val empty : string
  val of-bool : bool -> string
  val of-int : int -> string
  val of-float : float -> string
  val of-codepoints : int list -> string
  val of-char : Char.t -> string
  val of-length : length -> string
  val append : string -> string -> string
  val concat : string list -> string
  val is-empty : string -> bool
  val starts-with : string -> string -> bool
  val ends-with : string -> string -> bool
  val to-list : string -> Char.t list
  val pow : int -> string -> string
  val split : int -> string -> string * string
  val index : Char.t -> string -> int option
  % val byte-length : string -> int
  % val sub-bytes : int -> int -> string -> string
end = struct
  let equal = string-same
  let length = string-length
  let sub i l s = string-sub s i l
  let of-bool b = if b then `true` else `false`
  let of-int = arabic
  let of-float = show-float
  let empty = ` `
  let of-codepoints = string-unexplode
  let of-char = Char.to-string
  let append s1 s2 = s1 ^ s2

  let-rec concat xs = match xs with
  | [] -> empty
  | s :: xs -> s ^ concat xs

  let is-empty s =
    equal s empty

  let starts-with p s =
    let s-len = length s in
    let p-len = length p in
    ~(&(s-len >= p-len) &&& &(equal (s |> sub 0 p-len) p))

  let ends-with p s =
    let s-len = length s in
    let p-len = length p in
    ~(&(s-len >= p-len) &&& &(equal (s |> sub (s-len - 1 - p-len) p-len) p))

  let to-list s =
    let-rec go i acc = (match i with
    | 0 -> acc
    | _ -> go (i - 1) (Char.at (i - 1) s :: acc)) in
    go (length s) []

  let pow n s =
    let-rec go i acc = if i == n then acc else go (i + 1) (acc ^ s) in
    go 0 empty

  let split i s =
    (sub 0 i s, sub i (length s - i) s)
  
  let index c s =
    let cs = to-list s in
    let-rec aux cs acc = match cs with
    | [] -> None
    | (x::xs) -> if Equal.eq Char.equal c x then Some(acc) else aux xs (acc + 1) in
    aux cs 0
  
  let of-length l = ZL0.string-of-length l

  % let byte-length = string-byte-length
  % let sub-bytes i j s = string-sub-bytes s i j
end