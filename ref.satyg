module Ref : sig
%  type 'a t
  val make : 'a -> 'a ref
  val get : 'a ref -> 'a
  val set : 'a -> 'a ref -> unit   % e.g. ``r |> Ref.set 1``
  val update : ('a -> 'a) -> 'a ref -> unit
  val swap : 'a ref -> 'a ref -> unit
  val set-temporarily : 'a -> (unit -> 'b) -> 'a ref -> 'b
  val inc : int ref -> unit
  val dec : int ref -> unit
end = struct
%  type 'a t = 'a ref

  let make v =
    let-mutable x <- v in
    x

  let get r = !r
  let set v r = r <- v

  let update f r =
    let v = r |> get in
    r |> set (f v)

  let swap r1 r2 =
    let v1 = r1 |> get in
    r1 |> set (r2 |> get) before
    r2 |> set v1

  let set-temporarily v f r =
    let v-orig = r |> get in
    let () = r |> set v in
    let ret = f () in
    let () = r |> set v-orig in
    ret

  let inc r =
    r |> update (fun x -> x + 1)
  let dec r =
    r |> update (fun x -> x - 1)

end
  