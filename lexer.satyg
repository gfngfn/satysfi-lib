@import: regexp
@import: string
@require: list

% % usage:
% let rules = [
%   (| kind = `identifier`; regexp = seq alpha (many (alt alpha (alt digit (char `-`)))) |);
%   (| kind = `whitespace`; regexp = spaces |);
% ] in
% let (Some tokens) = Lexer.lex rules `abc defg   hijklMNL op123 `
% tokens |> List.iter (fun tk -> (Debug.log (`(| kind = `# ^ tk#kind ^ `, data = "`# ^ tk#data ^ `" |)`)))

module Lexer : sig
  val lex : ((| kind : string; regexp : RegExp.t |)) list -> string -> (((| kind : string; data : string |)) list) option
end = struct

  let lex rules src =
    let len = String.length src in
    let-rec loop i acc =
      if i == len
      then Some (List.reverse acc)
      else
        let s = src |> String.sub i (len - i) in
        let-rec iter rules = match rules with
        | [] -> None
        | (r :: rules) -> let (m :: _) = RegExp.exec (RegExp.seq RegExp.bof r#regexp) s in
          (match m with
          | None -> iter rules
          | (Some (_, m)) -> loop (i + String.length m) ((| kind = r#kind; data = m |) :: acc)) in
        iter rules in
    loop 0 []
  
end

type token-position = (|
  line : int;  % one origin
  column : int;  % zero origin
|)

module Token : sig
  type 'd t

  %% [make d pos] returns a new token with data [d] and
  %% position [pos].
  val make : 'd -> token-position -> 'd t

  val data : 'd t -> 'd

  val position : 'd t -> token-position

  val initial-position : token-position
end = struct
  type 'd token = 'd * token-position
  type 'd t = 'd token

  let make d pos = (d, pos)

  let data (d, _) = d

  let position (_, pos) = pos

  let initial-position = (| line = 1; column = 0 |)
end

let lex-string input =
  Stream.unfold (fun (cs, pos) -> (
    match List.uncons cs with
    | None -> Option.none
    | Some(c, new-cs) ->
      let token = (c, pos) in
      let new-pos =
        let line = pos#line + (if Char.equal c Char.newline then 1 else 0) in
        let column = if Char.equal c Char.newline then 0 else pos#column + 1 in
        (| line = line; column = column |)
      in Option.some (token, (new-cs, new-pos))
  )) (String.to-list input, Token.initial-position)
