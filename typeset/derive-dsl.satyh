@require: option
@import: derive/ast
@import: derive/line

open PoheDeriveAst

module PoheDeriveDSL : sig

    val derive: math -> derivation-ast
    val by: inline-text -> derivation-ast -> derivation-ast
    val byOp: inline-text -> derivation-ast -> derivation-ast
    val from: derivation-ast list -> derivation-ast -> derivation-ast
    val withLine: derivation-line -> derivation-ast -> derivation-ast

    val assume: math -> derivation-ast

    % Lines
    val standard-line : derivation-line
    val no-line       : derivation-line
    val dotted-line   : length -> length -> derivation-line

end = struct

    let standard-line = PoheDeriveLine.standard-line
    let no-line = PoheDeriveLine.no-line
    let dotted-line = PoheDeriveLine.dotted-line

    
    let derive conclusion = make-ast None None conclusion [] standard-line

    let by label-text ast =
        match ast with
            | Ast(_, rlabel-text, conclusion, assumptions, line) ->
                Ast(Some(label-text), rlabel-text, conclusion, assumptions, line)

    let byOp label-text ast =
        match ast with
            | Ast(llabel-text, _, conclusion, assumptions, line) ->
                Ast(llabel-text, Some(label-text), conclusion, assumptions, line)

    let from assumptions ast =
        match ast with
        | Ast(llabel-text, rlabel-text, conclusion, _, line) ->
            Ast(llabel-text, rlabel-text, conclusion, assumptions, line)

    let withLine line ast =
        match ast with
        | Ast(llabel-text, rlabel-text, conclusion, assumptions, _) ->
            Ast(llabel-text, rlabel-text, conclusion, assumptions, line)

    let assume assumption = make-ast None None assumption [] no-line

end