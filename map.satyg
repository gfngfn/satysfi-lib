@import: set
@require: list

% immutable map
%
% In [Kunen, 2011], a _function_ is defined to be a set of ordered pairs such that
% no two ordered pairs share the same object in their first position.
% So, technically, what the following module implements is _function_.

module Map : sig
  type 'k 'v t
  val empty : 'k order -> 'k 'v t
  val is-empty : 'k 'v t -> bool
  val size : 'k 'v t -> int
  val of- : 'k -> 'k 'v t -> 'v option
  val bind : 'k -> 'v -> 'k 'v t -> 'k 'v t
  val unbind : 'k -> 'k 'v t -> 'k 'v t
  val dom : 'k 'v t -> 'k list
  val ran : 'k 'v t -> 'v list
  val of-list : 'k order -> ('k * 'v) list -> 'k 'v t
  val to-list : 'k 'v t -> ('k * 'v) list
end = struct
  type 'k 'v u = ('k * 'v) Set.t
  type 'k 'v t = 'k 'v u

  let size m = Set.size m

  let empty ord = Set.empty (fun (k1, _) (k2, _) -> ord k1 k2)

  let is-empty m = Set.is-empty m

  let of- k m =
    match Set.choose m with
    | None -> None
    | Some(_, v) ->
      (match m |> Set.mem-opt (k, v) with
      | None -> None
      | Some(_, v) -> Some(v))

  let bind k v m = Set.insert (k, v) m

  let unbind k m = match Set.choose m with
  | None -> m
  | Some(_, v) -> Set.remove (k, v) m

  let dom m = m |> Set.to-list |> List.map fst

  let ran m = m |> Set.to-list |> List.map snd

  let of-list ord alist =
    let-rec aux
    | [] = empty ord
    | ((k, v) :: alist) = bind k v (aux alist)
    in aux alist

  let to-list m = Set.to-list m
end